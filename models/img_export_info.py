from typing import Optional
from pydantic import BaseModel, Field
from langchain_google_genai import GoogleGenerativeAI
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.output_parsers import JsonOutputParser
import os
from dotenv import load_dotenv
from config import Config

load_dotenv()

class ExtractedDrinkInfo(BaseModel):
    drink_type: Optional[str] = Field(
        default=None, description="Lo·∫°i ƒë·ªì u·ªëng (V√≠ d·ª•: Coffee, Tr√†, Capuchino,...)"
    )
    drink_color: Optional[str] = Field(
        default=None, description="M√†u s·∫Øc c·ªßa ƒë·ªì u·ªëng (V√≠ d·ª•: n√¢u, ƒë·ªè, xanh,...)"
    )
    container_type: Optional[str] = Field(
        default=None, description="Lo·∫°i v√† h√¨nh d√°ng c·ªßa c·ªëc ho·∫∑c ly (V√≠ d·ª•: c·ªëc nh·ª±a, c·ªëc th·ªßy tinh,...)"
    )
    ingredients: Optional[str] = Field(
        default=None, description="Th√†nh ph·∫ßn ch√≠nh c·ªßa ƒë·ªì u·ªëng (V√≠ d·ª•: s·ªØa, ƒë∆∞·ªùng, tr√¢n ch√¢u, ƒë√°,...)"
    )
    topping: Optional[str] = Field(
        default=None, description="L·ªõp ph·ªß tr√™n ƒë·ªì u·ªëng, v√≠ d·ª•: kem, tr√¢n ch√¢u, th·∫°ch, foam s·ªØa,..."
    )
    suitable_for: Optional[str] = Field(
        default=None, description="ƒê·ªëi t∆∞·ª£ng ph√π h·ª£p ho·∫∑c ho√†n c·∫£nh th∆∞·ªüng th·ª©c l√Ω t∆∞·ªüng (V√≠ d·ª•: cho ng∆∞·ªùi y√™u th√≠ch ƒë·ªì ng·ªçt, ph√π h·ª£p ng√†y l·∫°nh, l√Ω t∆∞·ªüng cho m√πa h√®,...)"
    )

class LLMExtract:
    @staticmethod
    def llm_extract(*, drink_description: str) -> Optional[ExtractedDrinkInfo]:
        parser = JsonOutputParser(pydantic_object=ExtractedDrinkInfo)

        system_prompt = (
            "B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh, chuy√™n tr√≠ch xu·∫•t th√¥ng tin c√≥ c·∫•u tr√∫c t·ª´ m√¥ t·∫£ ƒë·ªì u·ªëng.\n\n"
            "Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch k·ªπ n·ªôi dung m√¥ t·∫£ t√¥i cung c·∫•p v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau:\n"
            "1. **drink_type**: T√™n lo·∫°i ƒë·ªì u·ªëng ‚Äì vi·∫øt b·∫±ng **ti·∫øng Anh v√† ti·∫øng Vi·ªát** \n"
            "2. **drink_color**: M√†u s·∫Øc c·ªßa ƒë·ªì u·ªëng\n"
            "3. **container_type**: H√¨nh d√°ng v√† ki·ªÉu d√°ng c·ªßa c·ªëc ho·∫∑c ly \n"
            "4. **ingredients**: Th√†nh ph·∫ßn ch√≠nh \n"
            "5. **topping**: L·ªõp ph·ªß n·∫øu c√≥ \n"
            "6. **suitable_for**: ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng ho·∫∑c ho√†n c·∫£nh th∆∞·ªüng th·ª©c l√Ω t∆∞·ªüng\n\n"
            "üëâ Y√™u c·∫ßu:\n"
            "- T·∫•t c·∫£ th√¥ng tin ph·∫£i ƒë∆∞·ª£c vi·∫øt b·∫±ng **ti·∫øng Vi·ªát**, ngo·∫°i tr·ª´ `drink_type` l√† ti·∫øng Anh k√®m ti·∫øng Vi·ªát.\n"
            "- N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y ghi r√µ `kh√¥ng c√≥ topping`.\n"
            "- Tr·∫£ l·ªùi ƒë√∫ng theo ƒë·ªãnh d·∫°ng JSON sau:\n"
            f"{parser.get_format_instructions()}\n"
            "Ch·ªâ tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON, kh√¥ng k√®m gi·∫£i th√≠ch."
        )

        prompt = [
            AIMessage(content=system_prompt),
            HumanMessage(content=f"M√¥ t·∫£ ƒë·ªì u·ªëng:\n{drink_description}")
        ]

        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            print(" GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. Ki·ªÉm tra file .env.")
            return None

        llm = GoogleGenerativeAI(
            model=Config.llm_model,
            temperature=Config.llm_temperature,
            google_api_key=Config.google_api_key 
        )

        response = llm.invoke(prompt)

        try:
            data = parser.parse(response)
            return ExtractedDrinkInfo(**data)
        except Exception as e:
            print(" L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi LLM:", e)
            print("Ph·∫£n h·ªìi th√¥:\n", response)
            return None